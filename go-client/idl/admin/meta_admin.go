// Code generated by Thrift Compiler (0.14.1). DO NOT EDIT.

package admin

import(
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/apache/incubator-pegasus/go-client/idl/base"
	"github.com/apache/incubator-pegasus/go-client/idl/replication"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

var _ = base.GoUnusedProtection__
var _ = replication.GoUnusedProtection__
type ConfigType int64
const (
  ConfigType_CT_INVALID ConfigType = 0
  ConfigType_CT_ASSIGN_PRIMARY ConfigType = 1
  ConfigType_CT_UPGRADE_TO_PRIMARY ConfigType = 2
  ConfigType_CT_ADD_SECONDARY ConfigType = 3
  ConfigType_CT_UPGRADE_TO_SECONDARY ConfigType = 4
  ConfigType_CT_DOWNGRADE_TO_SECONDARY ConfigType = 5
  ConfigType_CT_DOWNGRADE_TO_INACTIVE ConfigType = 6
  ConfigType_CT_REMOVE ConfigType = 7
  ConfigType_CT_ADD_SECONDARY_FOR_LB ConfigType = 8
  ConfigType_CT_PRIMARY_FORCE_UPDATE_BALLOT ConfigType = 9
  ConfigType_CT_DROP_PARTITION ConfigType = 10
  ConfigType_CT_REGISTER_CHILD ConfigType = 11
)

func (p ConfigType) String() string {
  switch p {
  case ConfigType_CT_INVALID: return "CT_INVALID"
  case ConfigType_CT_ASSIGN_PRIMARY: return "CT_ASSIGN_PRIMARY"
  case ConfigType_CT_UPGRADE_TO_PRIMARY: return "CT_UPGRADE_TO_PRIMARY"
  case ConfigType_CT_ADD_SECONDARY: return "CT_ADD_SECONDARY"
  case ConfigType_CT_UPGRADE_TO_SECONDARY: return "CT_UPGRADE_TO_SECONDARY"
  case ConfigType_CT_DOWNGRADE_TO_SECONDARY: return "CT_DOWNGRADE_TO_SECONDARY"
  case ConfigType_CT_DOWNGRADE_TO_INACTIVE: return "CT_DOWNGRADE_TO_INACTIVE"
  case ConfigType_CT_REMOVE: return "CT_REMOVE"
  case ConfigType_CT_ADD_SECONDARY_FOR_LB: return "CT_ADD_SECONDARY_FOR_LB"
  case ConfigType_CT_PRIMARY_FORCE_UPDATE_BALLOT: return "CT_PRIMARY_FORCE_UPDATE_BALLOT"
  case ConfigType_CT_DROP_PARTITION: return "CT_DROP_PARTITION"
  case ConfigType_CT_REGISTER_CHILD: return "CT_REGISTER_CHILD"
  }
  return "<UNSET>"
}

func ConfigTypeFromString(s string) (ConfigType, error) {
  switch s {
  case "CT_INVALID": return ConfigType_CT_INVALID, nil 
  case "CT_ASSIGN_PRIMARY": return ConfigType_CT_ASSIGN_PRIMARY, nil 
  case "CT_UPGRADE_TO_PRIMARY": return ConfigType_CT_UPGRADE_TO_PRIMARY, nil 
  case "CT_ADD_SECONDARY": return ConfigType_CT_ADD_SECONDARY, nil 
  case "CT_UPGRADE_TO_SECONDARY": return ConfigType_CT_UPGRADE_TO_SECONDARY, nil 
  case "CT_DOWNGRADE_TO_SECONDARY": return ConfigType_CT_DOWNGRADE_TO_SECONDARY, nil 
  case "CT_DOWNGRADE_TO_INACTIVE": return ConfigType_CT_DOWNGRADE_TO_INACTIVE, nil 
  case "CT_REMOVE": return ConfigType_CT_REMOVE, nil 
  case "CT_ADD_SECONDARY_FOR_LB": return ConfigType_CT_ADD_SECONDARY_FOR_LB, nil 
  case "CT_PRIMARY_FORCE_UPDATE_BALLOT": return ConfigType_CT_PRIMARY_FORCE_UPDATE_BALLOT, nil 
  case "CT_DROP_PARTITION": return ConfigType_CT_DROP_PARTITION, nil 
  case "CT_REGISTER_CHILD": return ConfigType_CT_REGISTER_CHILD, nil 
  }
  return ConfigType(0), fmt.Errorf("not a valid ConfigType string")
}


func ConfigTypePtr(v ConfigType) *ConfigType { return &v }

func (p ConfigType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ConfigType) UnmarshalText(text []byte) error {
q, err := ConfigTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ConfigType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ConfigType(v)
return nil
}

func (p * ConfigType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type NodeStatus int64
const (
  NodeStatus_NS_INVALID NodeStatus = 0
  NodeStatus_NS_ALIVE NodeStatus = 1
  NodeStatus_NS_UNALIVE NodeStatus = 2
)

func (p NodeStatus) String() string {
  switch p {
  case NodeStatus_NS_INVALID: return "NS_INVALID"
  case NodeStatus_NS_ALIVE: return "NS_ALIVE"
  case NodeStatus_NS_UNALIVE: return "NS_UNALIVE"
  }
  return "<UNSET>"
}

func NodeStatusFromString(s string) (NodeStatus, error) {
  switch s {
  case "NS_INVALID": return NodeStatus_NS_INVALID, nil 
  case "NS_ALIVE": return NodeStatus_NS_ALIVE, nil 
  case "NS_UNALIVE": return NodeStatus_NS_UNALIVE, nil 
  }
  return NodeStatus(0), fmt.Errorf("not a valid NodeStatus string")
}


func NodeStatusPtr(v NodeStatus) *NodeStatus { return &v }

func (p NodeStatus) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *NodeStatus) UnmarshalText(text []byte) error {
q, err := NodeStatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *NodeStatus) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = NodeStatus(v)
return nil
}

func (p * NodeStatus) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type AppEnvOperation int64
const (
  AppEnvOperation_APP_ENV_OP_INVALID AppEnvOperation = 0
  AppEnvOperation_APP_ENV_OP_SET AppEnvOperation = 1
  AppEnvOperation_APP_ENV_OP_DEL AppEnvOperation = 2
  AppEnvOperation_APP_ENV_OP_CLEAR AppEnvOperation = 3
)

func (p AppEnvOperation) String() string {
  switch p {
  case AppEnvOperation_APP_ENV_OP_INVALID: return "APP_ENV_OP_INVALID"
  case AppEnvOperation_APP_ENV_OP_SET: return "APP_ENV_OP_SET"
  case AppEnvOperation_APP_ENV_OP_DEL: return "APP_ENV_OP_DEL"
  case AppEnvOperation_APP_ENV_OP_CLEAR: return "APP_ENV_OP_CLEAR"
  }
  return "<UNSET>"
}

func AppEnvOperationFromString(s string) (AppEnvOperation, error) {
  switch s {
  case "APP_ENV_OP_INVALID": return AppEnvOperation_APP_ENV_OP_INVALID, nil 
  case "APP_ENV_OP_SET": return AppEnvOperation_APP_ENV_OP_SET, nil 
  case "APP_ENV_OP_DEL": return AppEnvOperation_APP_ENV_OP_DEL, nil 
  case "APP_ENV_OP_CLEAR": return AppEnvOperation_APP_ENV_OP_CLEAR, nil 
  }
  return AppEnvOperation(0), fmt.Errorf("not a valid AppEnvOperation string")
}


func AppEnvOperationPtr(v AppEnvOperation) *AppEnvOperation { return &v }

func (p AppEnvOperation) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *AppEnvOperation) UnmarshalText(text []byte) error {
q, err := AppEnvOperationFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *AppEnvOperation) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = AppEnvOperation(v)
return nil
}

func (p * AppEnvOperation) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type MetaFunctionLevel int64
const (
  MetaFunctionLevel_fl_stopped MetaFunctionLevel = 100
  MetaFunctionLevel_fl_blind MetaFunctionLevel = 200
  MetaFunctionLevel_fl_freezed MetaFunctionLevel = 300
  MetaFunctionLevel_fl_steady MetaFunctionLevel = 400
  MetaFunctionLevel_fl_lively MetaFunctionLevel = 500
  MetaFunctionLevel_fl_invalid MetaFunctionLevel = 10000
)

func (p MetaFunctionLevel) String() string {
  switch p {
  case MetaFunctionLevel_fl_stopped: return "fl_stopped"
  case MetaFunctionLevel_fl_blind: return "fl_blind"
  case MetaFunctionLevel_fl_freezed: return "fl_freezed"
  case MetaFunctionLevel_fl_steady: return "fl_steady"
  case MetaFunctionLevel_fl_lively: return "fl_lively"
  case MetaFunctionLevel_fl_invalid: return "fl_invalid"
  }
  return "<UNSET>"
}

func MetaFunctionLevelFromString(s string) (MetaFunctionLevel, error) {
  switch s {
  case "fl_stopped": return MetaFunctionLevel_fl_stopped, nil 
  case "fl_blind": return MetaFunctionLevel_fl_blind, nil 
  case "fl_freezed": return MetaFunctionLevel_fl_freezed, nil 
  case "fl_steady": return MetaFunctionLevel_fl_steady, nil 
  case "fl_lively": return MetaFunctionLevel_fl_lively, nil 
  case "fl_invalid": return MetaFunctionLevel_fl_invalid, nil 
  }
  return MetaFunctionLevel(0), fmt.Errorf("not a valid MetaFunctionLevel string")
}


func MetaFunctionLevelPtr(v MetaFunctionLevel) *MetaFunctionLevel { return &v }

func (p MetaFunctionLevel) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *MetaFunctionLevel) UnmarshalText(text []byte) error {
q, err := MetaFunctionLevelFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *MetaFunctionLevel) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = MetaFunctionLevel(v)
return nil
}

func (p * MetaFunctionLevel) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type BalancerRequestType int64
const (
  BalancerRequestType_move_primary BalancerRequestType = 0
  BalancerRequestType_copy_primary BalancerRequestType = 1
  BalancerRequestType_copy_secondary BalancerRequestType = 2
)

func (p BalancerRequestType) String() string {
  switch p {
  case BalancerRequestType_move_primary: return "move_primary"
  case BalancerRequestType_copy_primary: return "copy_primary"
  case BalancerRequestType_copy_secondary: return "copy_secondary"
  }
  return "<UNSET>"
}

func BalancerRequestTypeFromString(s string) (BalancerRequestType, error) {
  switch s {
  case "move_primary": return BalancerRequestType_move_primary, nil 
  case "copy_primary": return BalancerRequestType_copy_primary, nil 
  case "copy_secondary": return BalancerRequestType_copy_secondary, nil 
  }
  return BalancerRequestType(0), fmt.Errorf("not a valid BalancerRequestType string")
}


func BalancerRequestTypePtr(v BalancerRequestType) *BalancerRequestType { return &v }

func (p BalancerRequestType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *BalancerRequestType) UnmarshalText(text []byte) error {
q, err := BalancerRequestTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *BalancerRequestType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = BalancerRequestType(v)
return nil
}

func (p * BalancerRequestType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - Info
//  - Config
//  - Type
//  - Node
//  - HostNode
//  - MetaSplitStatus
type ConfigurationUpdateRequest struct {
  Info *replication.AppInfo `thrift:"info,1" db:"info" json:"info"`
  Config *replication.PartitionConfiguration `thrift:"config,2" db:"config" json:"config"`
  Type ConfigType `thrift:"type,3" db:"type" json:"type"`
  Node *base.RPCAddress `thrift:"node,4" db:"node" json:"node"`
  HostNode *base.RPCAddress `thrift:"host_node,5" db:"host_node" json:"host_node"`
  MetaSplitStatus *SplitStatus `thrift:"meta_split_status,6" db:"meta_split_status" json:"meta_split_status,omitempty"`
}

func NewConfigurationUpdateRequest() *ConfigurationUpdateRequest {
  return &ConfigurationUpdateRequest{
Type: 0,
}
}

var ConfigurationUpdateRequest_Info_DEFAULT *replication.AppInfo
func (p *ConfigurationUpdateRequest) GetInfo() *replication.AppInfo {
  if !p.IsSetInfo() {
    return ConfigurationUpdateRequest_Info_DEFAULT
  }
return p.Info
}
var ConfigurationUpdateRequest_Config_DEFAULT *replication.PartitionConfiguration
func (p *ConfigurationUpdateRequest) GetConfig() *replication.PartitionConfiguration {
  if !p.IsSetConfig() {
    return ConfigurationUpdateRequest_Config_DEFAULT
  }
return p.Config
}

func (p *ConfigurationUpdateRequest) GetType() ConfigType {
  return p.Type
}
var ConfigurationUpdateRequest_Node_DEFAULT *base.RPCAddress
func (p *ConfigurationUpdateRequest) GetNode() *base.RPCAddress {
  if !p.IsSetNode() {
    return ConfigurationUpdateRequest_Node_DEFAULT
  }
return p.Node
}
var ConfigurationUpdateRequest_HostNode_DEFAULT *base.RPCAddress
func (p *ConfigurationUpdateRequest) GetHostNode() *base.RPCAddress {
  if !p.IsSetHostNode() {
    return ConfigurationUpdateRequest_HostNode_DEFAULT
  }
return p.HostNode
}
var ConfigurationUpdateRequest_MetaSplitStatus_DEFAULT SplitStatus
func (p *ConfigurationUpdateRequest) GetMetaSplitStatus() SplitStatus {
  if !p.IsSetMetaSplitStatus() {
    return ConfigurationUpdateRequest_MetaSplitStatus_DEFAULT
  }
return *p.MetaSplitStatus
}
func (p *ConfigurationUpdateRequest) IsSetInfo() bool {
  return p.Info != nil
}

func (p *ConfigurationUpdateRequest) IsSetConfig() bool {
  return p.Config != nil
}

func (p *ConfigurationUpdateRequest) IsSetNode() bool {
  return p.Node != nil
}

func (p *ConfigurationUpdateRequest) IsSetHostNode() bool {
  return p.HostNode != nil
}

func (p *ConfigurationUpdateRequest) IsSetMetaSplitStatus() bool {
  return p.MetaSplitStatus != nil
}

func (p *ConfigurationUpdateRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationUpdateRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Info = &replication.AppInfo{
  Status:   0,

  InitPartitionCount: -1,
}
  if err := p.Info.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Info), err)
  }
  return nil
}

func (p *ConfigurationUpdateRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Config = &replication.PartitionConfiguration{}
  if err := p.Config.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Config), err)
  }
  return nil
}

func (p *ConfigurationUpdateRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := ConfigType(v)
  p.Type = temp
}
  return nil
}

func (p *ConfigurationUpdateRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.Node = &base.RPCAddress{}
  if err := p.Node.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Node), err)
  }
  return nil
}

func (p *ConfigurationUpdateRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  p.HostNode = &base.RPCAddress{}
  if err := p.HostNode.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.HostNode), err)
  }
  return nil
}

func (p *ConfigurationUpdateRequest)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := SplitStatus(v)
  p.MetaSplitStatus = &temp
}
  return nil
}

func (p *ConfigurationUpdateRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_update_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationUpdateRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "info", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:info: ", p), err) }
  if err := p.Info.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Info), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:info: ", p), err) }
  return err
}

func (p *ConfigurationUpdateRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "config", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:config: ", p), err) }
  if err := p.Config.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Config), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:config: ", p), err) }
  return err
}

func (p *ConfigurationUpdateRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  return err
}

func (p *ConfigurationUpdateRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "node", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:node: ", p), err) }
  if err := p.Node.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Node), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:node: ", p), err) }
  return err
}

func (p *ConfigurationUpdateRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "host_node", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:host_node: ", p), err) }
  if err := p.HostNode.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.HostNode), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:host_node: ", p), err) }
  return err
}

func (p *ConfigurationUpdateRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMetaSplitStatus() {
    if err := oprot.WriteFieldBegin(ctx, "meta_split_status", thrift.I32, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:meta_split_status: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.MetaSplitStatus)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.meta_split_status (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:meta_split_status: ", p), err) }
  }
  return err
}

func (p *ConfigurationUpdateRequest) Equals(other *ConfigurationUpdateRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Info.Equals(other.Info) { return false }
  if !p.Config.Equals(other.Config) { return false }
  if p.Type != other.Type { return false }
  if !p.Node.Equals(other.Node) { return false }
  if !p.HostNode.Equals(other.HostNode) { return false }
  if p.MetaSplitStatus != other.MetaSplitStatus {
    if p.MetaSplitStatus == nil || other.MetaSplitStatus == nil {
      return false
    }
    if (*p.MetaSplitStatus) != (*other.MetaSplitStatus) { return false }
  }
  return true
}

func (p *ConfigurationUpdateRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationUpdateRequest(%+v)", *p)
}

// Attributes:
//  - Err
//  - Config
type ConfigurationUpdateResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
  Config *replication.PartitionConfiguration `thrift:"config,2" db:"config" json:"config"`
}

func NewConfigurationUpdateResponse() *ConfigurationUpdateResponse {
  return &ConfigurationUpdateResponse{}
}

var ConfigurationUpdateResponse_Err_DEFAULT *base.ErrorCode
func (p *ConfigurationUpdateResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return ConfigurationUpdateResponse_Err_DEFAULT
  }
return p.Err
}
var ConfigurationUpdateResponse_Config_DEFAULT *replication.PartitionConfiguration
func (p *ConfigurationUpdateResponse) GetConfig() *replication.PartitionConfiguration {
  if !p.IsSetConfig() {
    return ConfigurationUpdateResponse_Config_DEFAULT
  }
return p.Config
}
func (p *ConfigurationUpdateResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *ConfigurationUpdateResponse) IsSetConfig() bool {
  return p.Config != nil
}

func (p *ConfigurationUpdateResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationUpdateResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *ConfigurationUpdateResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Config = &replication.PartitionConfiguration{}
  if err := p.Config.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Config), err)
  }
  return nil
}

func (p *ConfigurationUpdateResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_update_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationUpdateResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *ConfigurationUpdateResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "config", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:config: ", p), err) }
  if err := p.Config.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Config), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:config: ", p), err) }
  return err
}

func (p *ConfigurationUpdateResponse) Equals(other *ConfigurationUpdateResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  if !p.Config.Equals(other.Config) { return false }
  return true
}

func (p *ConfigurationUpdateResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationUpdateResponse(%+v)", *p)
}

// Attributes:
//  - GeoTags
//  - TotalCapacityMb
type ReplicaServerInfo struct {
  GeoTags map[string]string `thrift:"geo_tags,1" db:"geo_tags" json:"geo_tags"`
  TotalCapacityMb int64 `thrift:"total_capacity_mb,2" db:"total_capacity_mb" json:"total_capacity_mb"`
}

func NewReplicaServerInfo() *ReplicaServerInfo {
  return &ReplicaServerInfo{}
}


func (p *ReplicaServerInfo) GetGeoTags() map[string]string {
  return p.GeoTags
}

func (p *ReplicaServerInfo) GetTotalCapacityMb() int64 {
  return p.TotalCapacityMb
}
func (p *ReplicaServerInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReplicaServerInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.GeoTags =  tMap
  for i := 0; i < size; i ++ {
var _key0 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key0 = v
}
var _val1 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val1 = v
}
    p.GeoTags[_key0] = _val1
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ReplicaServerInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TotalCapacityMb = v
}
  return nil
}

func (p *ReplicaServerInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "replica_server_info"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReplicaServerInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "geo_tags", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:geo_tags: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.GeoTags)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.GeoTags {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:geo_tags: ", p), err) }
  return err
}

func (p *ReplicaServerInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "total_capacity_mb", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:total_capacity_mb: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.TotalCapacityMb)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.total_capacity_mb (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:total_capacity_mb: ", p), err) }
  return err
}

func (p *ReplicaServerInfo) Equals(other *ReplicaServerInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.GeoTags) != len(other.GeoTags) { return false }
  for k, _tgt := range p.GeoTags {
    _src2 := other.GeoTags[k]
    if _tgt != _src2 { return false }
  }
  if p.TotalCapacityMb != other.TotalCapacityMb { return false }
  return true
}

func (p *ReplicaServerInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReplicaServerInfo(%+v)", *p)
}

// Attributes:
//  - Node
//  - StoredReplicas
//  - Info
type ConfigurationQueryByNodeRequest struct {
  Node *base.RPCAddress `thrift:"node,1" db:"node" json:"node"`
  StoredReplicas []*ReplicaInfo `thrift:"stored_replicas,2" db:"stored_replicas" json:"stored_replicas,omitempty"`
  Info *ReplicaServerInfo `thrift:"info,3" db:"info" json:"info,omitempty"`
}

func NewConfigurationQueryByNodeRequest() *ConfigurationQueryByNodeRequest {
  return &ConfigurationQueryByNodeRequest{}
}

var ConfigurationQueryByNodeRequest_Node_DEFAULT *base.RPCAddress
func (p *ConfigurationQueryByNodeRequest) GetNode() *base.RPCAddress {
  if !p.IsSetNode() {
    return ConfigurationQueryByNodeRequest_Node_DEFAULT
  }
return p.Node
}
var ConfigurationQueryByNodeRequest_StoredReplicas_DEFAULT []*ReplicaInfo

func (p *ConfigurationQueryByNodeRequest) GetStoredReplicas() []*ReplicaInfo {
  return p.StoredReplicas
}
var ConfigurationQueryByNodeRequest_Info_DEFAULT *ReplicaServerInfo
func (p *ConfigurationQueryByNodeRequest) GetInfo() *ReplicaServerInfo {
  if !p.IsSetInfo() {
    return ConfigurationQueryByNodeRequest_Info_DEFAULT
  }
return p.Info
}
func (p *ConfigurationQueryByNodeRequest) IsSetNode() bool {
  return p.Node != nil
}

func (p *ConfigurationQueryByNodeRequest) IsSetStoredReplicas() bool {
  return p.StoredReplicas != nil
}

func (p *ConfigurationQueryByNodeRequest) IsSetInfo() bool {
  return p.Info != nil
}

func (p *ConfigurationQueryByNodeRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationQueryByNodeRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Node = &base.RPCAddress{}
  if err := p.Node.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Node), err)
  }
  return nil
}

func (p *ConfigurationQueryByNodeRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ReplicaInfo, 0, size)
  p.StoredReplicas =  tSlice
  for i := 0; i < size; i ++ {
    _elem3 := &ReplicaInfo{}
    if err := _elem3.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
    }
    p.StoredReplicas = append(p.StoredReplicas, _elem3)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ConfigurationQueryByNodeRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Info = &ReplicaServerInfo{}
  if err := p.Info.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Info), err)
  }
  return nil
}

func (p *ConfigurationQueryByNodeRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_query_by_node_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationQueryByNodeRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "node", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:node: ", p), err) }
  if err := p.Node.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Node), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:node: ", p), err) }
  return err
}

func (p *ConfigurationQueryByNodeRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStoredReplicas() {
    if err := oprot.WriteFieldBegin(ctx, "stored_replicas", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:stored_replicas: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.StoredReplicas)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.StoredReplicas {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:stored_replicas: ", p), err) }
  }
  return err
}

func (p *ConfigurationQueryByNodeRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetInfo() {
    if err := oprot.WriteFieldBegin(ctx, "info", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:info: ", p), err) }
    if err := p.Info.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Info), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:info: ", p), err) }
  }
  return err
}

func (p *ConfigurationQueryByNodeRequest) Equals(other *ConfigurationQueryByNodeRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Node.Equals(other.Node) { return false }
  if len(p.StoredReplicas) != len(other.StoredReplicas) { return false }
  for i, _tgt := range p.StoredReplicas {
    _src4 := other.StoredReplicas[i]
    if !_tgt.Equals(_src4) { return false }
  }
  if !p.Info.Equals(other.Info) { return false }
  return true
}

func (p *ConfigurationQueryByNodeRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationQueryByNodeRequest(%+v)", *p)
}

// Attributes:
//  - Err
//  - Partitions
//  - GcReplicas
type ConfigurationQueryByNodeResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
  Partitions []*ConfigurationUpdateRequest `thrift:"partitions,2" db:"partitions" json:"partitions"`
  GcReplicas []*ReplicaInfo `thrift:"gc_replicas,3" db:"gc_replicas" json:"gc_replicas,omitempty"`
}

func NewConfigurationQueryByNodeResponse() *ConfigurationQueryByNodeResponse {
  return &ConfigurationQueryByNodeResponse{}
}

var ConfigurationQueryByNodeResponse_Err_DEFAULT *base.ErrorCode
func (p *ConfigurationQueryByNodeResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return ConfigurationQueryByNodeResponse_Err_DEFAULT
  }
return p.Err
}

func (p *ConfigurationQueryByNodeResponse) GetPartitions() []*ConfigurationUpdateRequest {
  return p.Partitions
}
var ConfigurationQueryByNodeResponse_GcReplicas_DEFAULT []*ReplicaInfo

func (p *ConfigurationQueryByNodeResponse) GetGcReplicas() []*ReplicaInfo {
  return p.GcReplicas
}
func (p *ConfigurationQueryByNodeResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *ConfigurationQueryByNodeResponse) IsSetGcReplicas() bool {
  return p.GcReplicas != nil
}

func (p *ConfigurationQueryByNodeResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationQueryByNodeResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *ConfigurationQueryByNodeResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ConfigurationUpdateRequest, 0, size)
  p.Partitions =  tSlice
  for i := 0; i < size; i ++ {
    _elem5 := &ConfigurationUpdateRequest{
    Type:     0,
}
    if err := _elem5.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem5), err)
    }
    p.Partitions = append(p.Partitions, _elem5)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ConfigurationQueryByNodeResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ReplicaInfo, 0, size)
  p.GcReplicas =  tSlice
  for i := 0; i < size; i ++ {
    _elem6 := &ReplicaInfo{}
    if err := _elem6.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
    }
    p.GcReplicas = append(p.GcReplicas, _elem6)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ConfigurationQueryByNodeResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_query_by_node_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationQueryByNodeResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *ConfigurationQueryByNodeResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "partitions", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:partitions: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Partitions)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Partitions {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:partitions: ", p), err) }
  return err
}

func (p *ConfigurationQueryByNodeResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetGcReplicas() {
    if err := oprot.WriteFieldBegin(ctx, "gc_replicas", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:gc_replicas: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.GcReplicas)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.GcReplicas {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:gc_replicas: ", p), err) }
  }
  return err
}

func (p *ConfigurationQueryByNodeResponse) Equals(other *ConfigurationQueryByNodeResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  if len(p.Partitions) != len(other.Partitions) { return false }
  for i, _tgt := range p.Partitions {
    _src7 := other.Partitions[i]
    if !_tgt.Equals(_src7) { return false }
  }
  if len(p.GcReplicas) != len(other.GcReplicas) { return false }
  for i, _tgt := range p.GcReplicas {
    _src8 := other.GcReplicas[i]
    if !_tgt.Equals(_src8) { return false }
  }
  return true
}

func (p *ConfigurationQueryByNodeResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationQueryByNodeResponse(%+v)", *p)
}

// Attributes:
//  - RecoverySet
//  - SkipBadNodes
//  - SkipLostPartitions
type ConfigurationRecoveryRequest struct {
  RecoverySet []*base.RPCAddress `thrift:"recovery_set,1" db:"recovery_set" json:"recovery_set"`
  SkipBadNodes bool `thrift:"skip_bad_nodes,2" db:"skip_bad_nodes" json:"skip_bad_nodes"`
  SkipLostPartitions bool `thrift:"skip_lost_partitions,3" db:"skip_lost_partitions" json:"skip_lost_partitions"`
}

func NewConfigurationRecoveryRequest() *ConfigurationRecoveryRequest {
  return &ConfigurationRecoveryRequest{}
}


func (p *ConfigurationRecoveryRequest) GetRecoverySet() []*base.RPCAddress {
  return p.RecoverySet
}

func (p *ConfigurationRecoveryRequest) GetSkipBadNodes() bool {
  return p.SkipBadNodes
}

func (p *ConfigurationRecoveryRequest) GetSkipLostPartitions() bool {
  return p.SkipLostPartitions
}
func (p *ConfigurationRecoveryRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationRecoveryRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*base.RPCAddress, 0, size)
  p.RecoverySet =  tSlice
  for i := 0; i < size; i ++ {
    _elem9 := &base.RPCAddress{}
    if err := _elem9.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem9), err)
    }
    p.RecoverySet = append(p.RecoverySet, _elem9)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ConfigurationRecoveryRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SkipBadNodes = v
}
  return nil
}

func (p *ConfigurationRecoveryRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SkipLostPartitions = v
}
  return nil
}

func (p *ConfigurationRecoveryRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_recovery_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationRecoveryRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "recovery_set", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:recovery_set: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.RecoverySet)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.RecoverySet {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:recovery_set: ", p), err) }
  return err
}

func (p *ConfigurationRecoveryRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "skip_bad_nodes", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:skip_bad_nodes: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.SkipBadNodes)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.skip_bad_nodes (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:skip_bad_nodes: ", p), err) }
  return err
}

func (p *ConfigurationRecoveryRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "skip_lost_partitions", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:skip_lost_partitions: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.SkipLostPartitions)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.skip_lost_partitions (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:skip_lost_partitions: ", p), err) }
  return err
}

func (p *ConfigurationRecoveryRequest) Equals(other *ConfigurationRecoveryRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.RecoverySet) != len(other.RecoverySet) { return false }
  for i, _tgt := range p.RecoverySet {
    _src10 := other.RecoverySet[i]
    if !_tgt.Equals(_src10) { return false }
  }
  if p.SkipBadNodes != other.SkipBadNodes { return false }
  if p.SkipLostPartitions != other.SkipLostPartitions { return false }
  return true
}

func (p *ConfigurationRecoveryRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationRecoveryRequest(%+v)", *p)
}

// Attributes:
//  - Err
//  - HintMessage
type ConfigurationRecoveryResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
  HintMessage string `thrift:"hint_message,2" db:"hint_message" json:"hint_message"`
}

func NewConfigurationRecoveryResponse() *ConfigurationRecoveryResponse {
  return &ConfigurationRecoveryResponse{}
}

var ConfigurationRecoveryResponse_Err_DEFAULT *base.ErrorCode
func (p *ConfigurationRecoveryResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return ConfigurationRecoveryResponse_Err_DEFAULT
  }
return p.Err
}

func (p *ConfigurationRecoveryResponse) GetHintMessage() string {
  return p.HintMessage
}
func (p *ConfigurationRecoveryResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *ConfigurationRecoveryResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationRecoveryResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *ConfigurationRecoveryResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.HintMessage = v
}
  return nil
}

func (p *ConfigurationRecoveryResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_recovery_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationRecoveryResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *ConfigurationRecoveryResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hint_message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hint_message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.HintMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hint_message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hint_message: ", p), err) }
  return err
}

func (p *ConfigurationRecoveryResponse) Equals(other *ConfigurationRecoveryResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  if p.HintMessage != other.HintMessage { return false }
  return true
}

func (p *ConfigurationRecoveryResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationRecoveryResponse(%+v)", *p)
}

// Attributes:
//  - PartitionCount
//  - ReplicaCount
//  - SuccessIfExist
//  - AppType
//  - IsStateful
//  - Envs
type CreateAppOptions struct {
  PartitionCount int32 `thrift:"partition_count,1" db:"partition_count" json:"partition_count"`
  ReplicaCount int32 `thrift:"replica_count,2" db:"replica_count" json:"replica_count"`
  SuccessIfExist bool `thrift:"success_if_exist,3" db:"success_if_exist" json:"success_if_exist"`
  AppType string `thrift:"app_type,4" db:"app_type" json:"app_type"`
  IsStateful bool `thrift:"is_stateful,5" db:"is_stateful" json:"is_stateful"`
  Envs map[string]string `thrift:"envs,6" db:"envs" json:"envs"`
}

func NewCreateAppOptions() *CreateAppOptions {
  return &CreateAppOptions{}
}


func (p *CreateAppOptions) GetPartitionCount() int32 {
  return p.PartitionCount
}

func (p *CreateAppOptions) GetReplicaCount() int32 {
  return p.ReplicaCount
}

func (p *CreateAppOptions) GetSuccessIfExist() bool {
  return p.SuccessIfExist
}

func (p *CreateAppOptions) GetAppType() string {
  return p.AppType
}

func (p *CreateAppOptions) GetIsStateful() bool {
  return p.IsStateful
}

func (p *CreateAppOptions) GetEnvs() map[string]string {
  return p.Envs
}
func (p *CreateAppOptions) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateAppOptions)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.PartitionCount = v
}
  return nil
}

func (p *CreateAppOptions)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ReplicaCount = v
}
  return nil
}

func (p *CreateAppOptions)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SuccessIfExist = v
}
  return nil
}

func (p *CreateAppOptions)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.AppType = v
}
  return nil
}

func (p *CreateAppOptions)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.IsStateful = v
}
  return nil
}

func (p *CreateAppOptions)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Envs =  tMap
  for i := 0; i < size; i ++ {
var _key11 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key11 = v
}
var _val12 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val12 = v
}
    p.Envs[_key11] = _val12
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *CreateAppOptions) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "create_app_options"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateAppOptions) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "partition_count", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:partition_count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PartitionCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.partition_count (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:partition_count: ", p), err) }
  return err
}

func (p *CreateAppOptions) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "replica_count", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:replica_count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ReplicaCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.replica_count (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:replica_count: ", p), err) }
  return err
}

func (p *CreateAppOptions) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "success_if_exist", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:success_if_exist: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.SuccessIfExist)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.success_if_exist (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:success_if_exist: ", p), err) }
  return err
}

func (p *CreateAppOptions) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "app_type", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:app_type: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.app_type (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:app_type: ", p), err) }
  return err
}

func (p *CreateAppOptions) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "is_stateful", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:is_stateful: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IsStateful)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_stateful (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:is_stateful: ", p), err) }
  return err
}

func (p *CreateAppOptions) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "envs", thrift.MAP, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:envs: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Envs)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Envs {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:envs: ", p), err) }
  return err
}

func (p *CreateAppOptions) Equals(other *CreateAppOptions) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.PartitionCount != other.PartitionCount { return false }
  if p.ReplicaCount != other.ReplicaCount { return false }
  if p.SuccessIfExist != other.SuccessIfExist { return false }
  if p.AppType != other.AppType { return false }
  if p.IsStateful != other.IsStateful { return false }
  if len(p.Envs) != len(other.Envs) { return false }
  for k, _tgt := range p.Envs {
    _src13 := other.Envs[k]
    if _tgt != _src13 { return false }
  }
  return true
}

func (p *CreateAppOptions) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateAppOptions(%+v)", *p)
}

// Attributes:
//  - AppName
//  - Options
type ConfigurationCreateAppRequest struct {
  AppName string `thrift:"app_name,1" db:"app_name" json:"app_name"`
  Options *CreateAppOptions `thrift:"options,2" db:"options" json:"options"`
}

func NewConfigurationCreateAppRequest() *ConfigurationCreateAppRequest {
  return &ConfigurationCreateAppRequest{}
}


func (p *ConfigurationCreateAppRequest) GetAppName() string {
  return p.AppName
}
var ConfigurationCreateAppRequest_Options_DEFAULT *CreateAppOptions
func (p *ConfigurationCreateAppRequest) GetOptions() *CreateAppOptions {
  if !p.IsSetOptions() {
    return ConfigurationCreateAppRequest_Options_DEFAULT
  }
return p.Options
}
func (p *ConfigurationCreateAppRequest) IsSetOptions() bool {
  return p.Options != nil
}

func (p *ConfigurationCreateAppRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationCreateAppRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AppName = v
}
  return nil
}

func (p *ConfigurationCreateAppRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Options = &CreateAppOptions{}
  if err := p.Options.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Options), err)
  }
  return nil
}

func (p *ConfigurationCreateAppRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_create_app_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationCreateAppRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "app_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:app_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.app_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:app_name: ", p), err) }
  return err
}

func (p *ConfigurationCreateAppRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "options", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:options: ", p), err) }
  if err := p.Options.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Options), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:options: ", p), err) }
  return err
}

func (p *ConfigurationCreateAppRequest) Equals(other *ConfigurationCreateAppRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AppName != other.AppName { return false }
  if !p.Options.Equals(other.Options) { return false }
  return true
}

func (p *ConfigurationCreateAppRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationCreateAppRequest(%+v)", *p)
}

// Attributes:
//  - Err
//  - Appid
type ConfigurationCreateAppResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
  Appid int32 `thrift:"appid,2" db:"appid" json:"appid"`
}

func NewConfigurationCreateAppResponse() *ConfigurationCreateAppResponse {
  return &ConfigurationCreateAppResponse{}
}

var ConfigurationCreateAppResponse_Err_DEFAULT *base.ErrorCode
func (p *ConfigurationCreateAppResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return ConfigurationCreateAppResponse_Err_DEFAULT
  }
return p.Err
}

func (p *ConfigurationCreateAppResponse) GetAppid() int32 {
  return p.Appid
}
func (p *ConfigurationCreateAppResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *ConfigurationCreateAppResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationCreateAppResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *ConfigurationCreateAppResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Appid = v
}
  return nil
}

func (p *ConfigurationCreateAppResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_create_app_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationCreateAppResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *ConfigurationCreateAppResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "appid", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appid: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Appid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appid: ", p), err) }
  return err
}

func (p *ConfigurationCreateAppResponse) Equals(other *ConfigurationCreateAppResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  if p.Appid != other.Appid { return false }
  return true
}

func (p *ConfigurationCreateAppResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationCreateAppResponse(%+v)", *p)
}

// Attributes:
//  - SuccessIfNotExist
//  - ReserveSeconds
type DropAppOptions struct {
  SuccessIfNotExist bool `thrift:"success_if_not_exist,1" db:"success_if_not_exist" json:"success_if_not_exist"`
  ReserveSeconds *int64 `thrift:"reserve_seconds,2" db:"reserve_seconds" json:"reserve_seconds,omitempty"`
}

func NewDropAppOptions() *DropAppOptions {
  return &DropAppOptions{}
}


func (p *DropAppOptions) GetSuccessIfNotExist() bool {
  return p.SuccessIfNotExist
}
var DropAppOptions_ReserveSeconds_DEFAULT int64
func (p *DropAppOptions) GetReserveSeconds() int64 {
  if !p.IsSetReserveSeconds() {
    return DropAppOptions_ReserveSeconds_DEFAULT
  }
return *p.ReserveSeconds
}
func (p *DropAppOptions) IsSetReserveSeconds() bool {
  return p.ReserveSeconds != nil
}

func (p *DropAppOptions) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DropAppOptions)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SuccessIfNotExist = v
}
  return nil
}

func (p *DropAppOptions)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ReserveSeconds = &v
}
  return nil
}

func (p *DropAppOptions) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "drop_app_options"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DropAppOptions) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "success_if_not_exist", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:success_if_not_exist: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.SuccessIfNotExist)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.success_if_not_exist (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:success_if_not_exist: ", p), err) }
  return err
}

func (p *DropAppOptions) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetReserveSeconds() {
    if err := oprot.WriteFieldBegin(ctx, "reserve_seconds", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:reserve_seconds: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.ReserveSeconds)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.reserve_seconds (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:reserve_seconds: ", p), err) }
  }
  return err
}

func (p *DropAppOptions) Equals(other *DropAppOptions) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SuccessIfNotExist != other.SuccessIfNotExist { return false }
  if p.ReserveSeconds != other.ReserveSeconds {
    if p.ReserveSeconds == nil || other.ReserveSeconds == nil {
      return false
    }
    if (*p.ReserveSeconds) != (*other.ReserveSeconds) { return false }
  }
  return true
}

func (p *DropAppOptions) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DropAppOptions(%+v)", *p)
}

// Attributes:
//  - AppName
//  - Options
type ConfigurationDropAppRequest struct {
  AppName string `thrift:"app_name,1" db:"app_name" json:"app_name"`
  Options *DropAppOptions `thrift:"options,2" db:"options" json:"options"`
}

func NewConfigurationDropAppRequest() *ConfigurationDropAppRequest {
  return &ConfigurationDropAppRequest{}
}


func (p *ConfigurationDropAppRequest) GetAppName() string {
  return p.AppName
}
var ConfigurationDropAppRequest_Options_DEFAULT *DropAppOptions
func (p *ConfigurationDropAppRequest) GetOptions() *DropAppOptions {
  if !p.IsSetOptions() {
    return ConfigurationDropAppRequest_Options_DEFAULT
  }
return p.Options
}
func (p *ConfigurationDropAppRequest) IsSetOptions() bool {
  return p.Options != nil
}

func (p *ConfigurationDropAppRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationDropAppRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AppName = v
}
  return nil
}

func (p *ConfigurationDropAppRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Options = &DropAppOptions{}
  if err := p.Options.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Options), err)
  }
  return nil
}

func (p *ConfigurationDropAppRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_drop_app_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationDropAppRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "app_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:app_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.app_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:app_name: ", p), err) }
  return err
}

func (p *ConfigurationDropAppRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "options", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:options: ", p), err) }
  if err := p.Options.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Options), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:options: ", p), err) }
  return err
}

func (p *ConfigurationDropAppRequest) Equals(other *ConfigurationDropAppRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AppName != other.AppName { return false }
  if !p.Options.Equals(other.Options) { return false }
  return true
}

func (p *ConfigurationDropAppRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationDropAppRequest(%+v)", *p)
}

// Attributes:
//  - Err
type ConfigurationDropAppResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
}

func NewConfigurationDropAppResponse() *ConfigurationDropAppResponse {
  return &ConfigurationDropAppResponse{}
}

var ConfigurationDropAppResponse_Err_DEFAULT *base.ErrorCode
func (p *ConfigurationDropAppResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return ConfigurationDropAppResponse_Err_DEFAULT
  }
return p.Err
}
func (p *ConfigurationDropAppResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *ConfigurationDropAppResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationDropAppResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *ConfigurationDropAppResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_drop_app_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationDropAppResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *ConfigurationDropAppResponse) Equals(other *ConfigurationDropAppResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  return true
}

func (p *ConfigurationDropAppResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationDropAppResponse(%+v)", *p)
}

// Attributes:
//  - AppID
//  - NewAppName_
type ConfigurationRecallAppRequest struct {
  AppID int32 `thrift:"app_id,1" db:"app_id" json:"app_id"`
  NewAppName_ string `thrift:"new_app_name,2" db:"new_app_name" json:"new_app_name"`
}

func NewConfigurationRecallAppRequest() *ConfigurationRecallAppRequest {
  return &ConfigurationRecallAppRequest{}
}


func (p *ConfigurationRecallAppRequest) GetAppID() int32 {
  return p.AppID
}

func (p *ConfigurationRecallAppRequest) GetNewAppName_() string {
  return p.NewAppName_
}
func (p *ConfigurationRecallAppRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationRecallAppRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AppID = v
}
  return nil
}

func (p *ConfigurationRecallAppRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NewAppName_ = v
}
  return nil
}

func (p *ConfigurationRecallAppRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_recall_app_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationRecallAppRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "app_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:app_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.AppID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.app_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:app_id: ", p), err) }
  return err
}

func (p *ConfigurationRecallAppRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "new_app_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:new_app_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.NewAppName_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.new_app_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:new_app_name: ", p), err) }
  return err
}

func (p *ConfigurationRecallAppRequest) Equals(other *ConfigurationRecallAppRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AppID != other.AppID { return false }
  if p.NewAppName_ != other.NewAppName_ { return false }
  return true
}

func (p *ConfigurationRecallAppRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationRecallAppRequest(%+v)", *p)
}

// Attributes:
//  - Err
//  - Info
type ConfigurationRecallAppResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
  Info *replication.AppInfo `thrift:"info,2" db:"info" json:"info"`
}

func NewConfigurationRecallAppResponse() *ConfigurationRecallAppResponse {
  return &ConfigurationRecallAppResponse{}
}

var ConfigurationRecallAppResponse_Err_DEFAULT *base.ErrorCode
func (p *ConfigurationRecallAppResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return ConfigurationRecallAppResponse_Err_DEFAULT
  }
return p.Err
}
var ConfigurationRecallAppResponse_Info_DEFAULT *replication.AppInfo
func (p *ConfigurationRecallAppResponse) GetInfo() *replication.AppInfo {
  if !p.IsSetInfo() {
    return ConfigurationRecallAppResponse_Info_DEFAULT
  }
return p.Info
}
func (p *ConfigurationRecallAppResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *ConfigurationRecallAppResponse) IsSetInfo() bool {
  return p.Info != nil
}

func (p *ConfigurationRecallAppResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationRecallAppResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *ConfigurationRecallAppResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Info = &replication.AppInfo{
  Status:   0,

  InitPartitionCount: -1,
}
  if err := p.Info.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Info), err)
  }
  return nil
}

func (p *ConfigurationRecallAppResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_recall_app_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationRecallAppResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *ConfigurationRecallAppResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "info", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:info: ", p), err) }
  if err := p.Info.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Info), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:info: ", p), err) }
  return err
}

func (p *ConfigurationRecallAppResponse) Equals(other *ConfigurationRecallAppResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  if !p.Info.Equals(other.Info) { return false }
  return true
}

func (p *ConfigurationRecallAppResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationRecallAppResponse(%+v)", *p)
}

// Attributes:
//  - Status
type ConfigurationListAppsRequest struct {
  Status replication.AppStatus `thrift:"status,1" db:"status" json:"status"`
}

func NewConfigurationListAppsRequest() *ConfigurationListAppsRequest {
  return &ConfigurationListAppsRequest{
Status: 0,
}
}


func (p *ConfigurationListAppsRequest) GetStatus() replication.AppStatus {
  return p.Status
}
func (p *ConfigurationListAppsRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationListAppsRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := replication.AppStatus(v)
  p.Status = temp
}
  return nil
}

func (p *ConfigurationListAppsRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_list_apps_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationListAppsRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *ConfigurationListAppsRequest) Equals(other *ConfigurationListAppsRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  return true
}

func (p *ConfigurationListAppsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationListAppsRequest(%+v)", *p)
}

// Attributes:
//  - Err
//  - Infos
type ConfigurationListAppsResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
  Infos []*replication.AppInfo `thrift:"infos,2" db:"infos" json:"infos"`
}

func NewConfigurationListAppsResponse() *ConfigurationListAppsResponse {
  return &ConfigurationListAppsResponse{}
}

var ConfigurationListAppsResponse_Err_DEFAULT *base.ErrorCode
func (p *ConfigurationListAppsResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return ConfigurationListAppsResponse_Err_DEFAULT
  }
return p.Err
}

func (p *ConfigurationListAppsResponse) GetInfos() []*replication.AppInfo {
  return p.Infos
}
func (p *ConfigurationListAppsResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *ConfigurationListAppsResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationListAppsResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *ConfigurationListAppsResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*replication.AppInfo, 0, size)
  p.Infos =  tSlice
  for i := 0; i < size; i ++ {
    _elem14 := &replication.AppInfo{
    Status:     0,

    InitPartitionCount: -1,
}
    if err := _elem14.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem14), err)
    }
    p.Infos = append(p.Infos, _elem14)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ConfigurationListAppsResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_list_apps_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationListAppsResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *ConfigurationListAppsResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "infos", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:infos: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Infos)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Infos {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:infos: ", p), err) }
  return err
}

func (p *ConfigurationListAppsResponse) Equals(other *ConfigurationListAppsResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  if len(p.Infos) != len(other.Infos) { return false }
  for i, _tgt := range p.Infos {
    _src15 := other.Infos[i]
    if !_tgt.Equals(_src15) { return false }
  }
  return true
}

func (p *ConfigurationListAppsResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationListAppsResponse(%+v)", *p)
}

// Attributes:
//  - MetaServer
type QueryAppInfoRequest struct {
  MetaServer *base.RPCAddress `thrift:"meta_server,1" db:"meta_server" json:"meta_server"`
}

func NewQueryAppInfoRequest() *QueryAppInfoRequest {
  return &QueryAppInfoRequest{}
}

var QueryAppInfoRequest_MetaServer_DEFAULT *base.RPCAddress
func (p *QueryAppInfoRequest) GetMetaServer() *base.RPCAddress {
  if !p.IsSetMetaServer() {
    return QueryAppInfoRequest_MetaServer_DEFAULT
  }
return p.MetaServer
}
func (p *QueryAppInfoRequest) IsSetMetaServer() bool {
  return p.MetaServer != nil
}

func (p *QueryAppInfoRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *QueryAppInfoRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.MetaServer = &base.RPCAddress{}
  if err := p.MetaServer.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MetaServer), err)
  }
  return nil
}

func (p *QueryAppInfoRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "query_app_info_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *QueryAppInfoRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "meta_server", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:meta_server: ", p), err) }
  if err := p.MetaServer.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MetaServer), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:meta_server: ", p), err) }
  return err
}

func (p *QueryAppInfoRequest) Equals(other *QueryAppInfoRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.MetaServer.Equals(other.MetaServer) { return false }
  return true
}

func (p *QueryAppInfoRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("QueryAppInfoRequest(%+v)", *p)
}

// Attributes:
//  - Err
//  - Apps
type QueryAppInfoResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
  Apps []*replication.AppInfo `thrift:"apps,2" db:"apps" json:"apps"`
}

func NewQueryAppInfoResponse() *QueryAppInfoResponse {
  return &QueryAppInfoResponse{}
}

var QueryAppInfoResponse_Err_DEFAULT *base.ErrorCode
func (p *QueryAppInfoResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return QueryAppInfoResponse_Err_DEFAULT
  }
return p.Err
}

func (p *QueryAppInfoResponse) GetApps() []*replication.AppInfo {
  return p.Apps
}
func (p *QueryAppInfoResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *QueryAppInfoResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *QueryAppInfoResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *QueryAppInfoResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*replication.AppInfo, 0, size)
  p.Apps =  tSlice
  for i := 0; i < size; i ++ {
    _elem16 := &replication.AppInfo{
    Status:     0,

    InitPartitionCount: -1,
}
    if err := _elem16.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem16), err)
    }
    p.Apps = append(p.Apps, _elem16)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *QueryAppInfoResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "query_app_info_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *QueryAppInfoResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *QueryAppInfoResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "apps", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:apps: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Apps)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Apps {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:apps: ", p), err) }
  return err
}

func (p *QueryAppInfoResponse) Equals(other *QueryAppInfoResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  if len(p.Apps) != len(other.Apps) { return false }
  for i, _tgt := range p.Apps {
    _src17 := other.Apps[i]
    if !_tgt.Equals(_src17) { return false }
  }
  return true
}

func (p *QueryAppInfoResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("QueryAppInfoResponse(%+v)", *p)
}

// Attributes:
//  - AppName
//  - Op
//  - Keys
//  - Values
//  - ClearPrefix
type ConfigurationUpdateAppEnvRequest struct {
  AppName string `thrift:"app_name,1" db:"app_name" json:"app_name"`
  Op AppEnvOperation `thrift:"op,2" db:"op" json:"op"`
  Keys []string `thrift:"keys,3" db:"keys" json:"keys,omitempty"`
  Values []string `thrift:"values,4" db:"values" json:"values,omitempty"`
  ClearPrefix *string `thrift:"clear_prefix,5" db:"clear_prefix" json:"clear_prefix,omitempty"`
}

func NewConfigurationUpdateAppEnvRequest() *ConfigurationUpdateAppEnvRequest {
  return &ConfigurationUpdateAppEnvRequest{
Op: 0,
}
}


func (p *ConfigurationUpdateAppEnvRequest) GetAppName() string {
  return p.AppName
}

func (p *ConfigurationUpdateAppEnvRequest) GetOp() AppEnvOperation {
  return p.Op
}
var ConfigurationUpdateAppEnvRequest_Keys_DEFAULT []string

func (p *ConfigurationUpdateAppEnvRequest) GetKeys() []string {
  return p.Keys
}
var ConfigurationUpdateAppEnvRequest_Values_DEFAULT []string

func (p *ConfigurationUpdateAppEnvRequest) GetValues() []string {
  return p.Values
}
var ConfigurationUpdateAppEnvRequest_ClearPrefix_DEFAULT string
func (p *ConfigurationUpdateAppEnvRequest) GetClearPrefix() string {
  if !p.IsSetClearPrefix() {
    return ConfigurationUpdateAppEnvRequest_ClearPrefix_DEFAULT
  }
return *p.ClearPrefix
}
func (p *ConfigurationUpdateAppEnvRequest) IsSetKeys() bool {
  return p.Keys != nil
}

func (p *ConfigurationUpdateAppEnvRequest) IsSetValues() bool {
  return p.Values != nil
}

func (p *ConfigurationUpdateAppEnvRequest) IsSetClearPrefix() bool {
  return p.ClearPrefix != nil
}

func (p *ConfigurationUpdateAppEnvRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationUpdateAppEnvRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AppName = v
}
  return nil
}

func (p *ConfigurationUpdateAppEnvRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := AppEnvOperation(v)
  p.Op = temp
}
  return nil
}

func (p *ConfigurationUpdateAppEnvRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Keys =  tSlice
  for i := 0; i < size; i ++ {
var _elem18 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem18 = v
}
    p.Keys = append(p.Keys, _elem18)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ConfigurationUpdateAppEnvRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Values =  tSlice
  for i := 0; i < size; i ++ {
var _elem19 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem19 = v
}
    p.Values = append(p.Values, _elem19)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ConfigurationUpdateAppEnvRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ClearPrefix = &v
}
  return nil
}

func (p *ConfigurationUpdateAppEnvRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_update_app_env_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationUpdateAppEnvRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "app_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:app_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.app_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:app_name: ", p), err) }
  return err
}

func (p *ConfigurationUpdateAppEnvRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "op", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:op: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Op)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.op (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:op: ", p), err) }
  return err
}

func (p *ConfigurationUpdateAppEnvRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetKeys() {
    if err := oprot.WriteFieldBegin(ctx, "keys", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:keys: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Keys)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Keys {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:keys: ", p), err) }
  }
  return err
}

func (p *ConfigurationUpdateAppEnvRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetValues() {
    if err := oprot.WriteFieldBegin(ctx, "values", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:values: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Values)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Values {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:values: ", p), err) }
  }
  return err
}

func (p *ConfigurationUpdateAppEnvRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetClearPrefix() {
    if err := oprot.WriteFieldBegin(ctx, "clear_prefix", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:clear_prefix: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.ClearPrefix)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.clear_prefix (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:clear_prefix: ", p), err) }
  }
  return err
}

func (p *ConfigurationUpdateAppEnvRequest) Equals(other *ConfigurationUpdateAppEnvRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AppName != other.AppName { return false }
  if p.Op != other.Op { return false }
  if len(p.Keys) != len(other.Keys) { return false }
  for i, _tgt := range p.Keys {
    _src20 := other.Keys[i]
    if _tgt != _src20 { return false }
  }
  if len(p.Values) != len(other.Values) { return false }
  for i, _tgt := range p.Values {
    _src21 := other.Values[i]
    if _tgt != _src21 { return false }
  }
  if p.ClearPrefix != other.ClearPrefix {
    if p.ClearPrefix == nil || other.ClearPrefix == nil {
      return false
    }
    if (*p.ClearPrefix) != (*other.ClearPrefix) { return false }
  }
  return true
}

func (p *ConfigurationUpdateAppEnvRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationUpdateAppEnvRequest(%+v)", *p)
}

// Attributes:
//  - Err
//  - HintMessage
type ConfigurationUpdateAppEnvResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
  HintMessage string `thrift:"hint_message,2" db:"hint_message" json:"hint_message"`
}

func NewConfigurationUpdateAppEnvResponse() *ConfigurationUpdateAppEnvResponse {
  return &ConfigurationUpdateAppEnvResponse{}
}

var ConfigurationUpdateAppEnvResponse_Err_DEFAULT *base.ErrorCode
func (p *ConfigurationUpdateAppEnvResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return ConfigurationUpdateAppEnvResponse_Err_DEFAULT
  }
return p.Err
}

func (p *ConfigurationUpdateAppEnvResponse) GetHintMessage() string {
  return p.HintMessage
}
func (p *ConfigurationUpdateAppEnvResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *ConfigurationUpdateAppEnvResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationUpdateAppEnvResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *ConfigurationUpdateAppEnvResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.HintMessage = v
}
  return nil
}

func (p *ConfigurationUpdateAppEnvResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_update_app_env_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationUpdateAppEnvResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *ConfigurationUpdateAppEnvResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hint_message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hint_message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.HintMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hint_message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hint_message: ", p), err) }
  return err
}

func (p *ConfigurationUpdateAppEnvResponse) Equals(other *ConfigurationUpdateAppEnvResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  if p.HintMessage != other.HintMessage { return false }
  return true
}

func (p *ConfigurationUpdateAppEnvResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationUpdateAppEnvResponse(%+v)", *p)
}

// Attributes:
//  - AppName
//  - TriggerTime
//  - TargetLevel
//  - Bottommost
//  - MaxRunningCount
type StartAppManualCompactRequest struct {
  AppName string `thrift:"app_name,1" db:"app_name" json:"app_name"`
  TriggerTime *int64 `thrift:"trigger_time,2" db:"trigger_time" json:"trigger_time,omitempty"`
  TargetLevel *int32 `thrift:"target_level,3" db:"target_level" json:"target_level,omitempty"`
  Bottommost *bool `thrift:"bottommost,4" db:"bottommost" json:"bottommost,omitempty"`
  MaxRunningCount *int32 `thrift:"max_running_count,5" db:"max_running_count" json:"max_running_count,omitempty"`
}

func NewStartAppManualCompactRequest() *StartAppManualCompactRequest {
  return &StartAppManualCompactRequest{}
}


func (p *StartAppManualCompactRequest) GetAppName() string {
  return p.AppName
}
var StartAppManualCompactRequest_TriggerTime_DEFAULT int64
func (p *StartAppManualCompactRequest) GetTriggerTime() int64 {
  if !p.IsSetTriggerTime() {
    return StartAppManualCompactRequest_TriggerTime_DEFAULT
  }
return *p.TriggerTime
}
var StartAppManualCompactRequest_TargetLevel_DEFAULT int32
func (p *StartAppManualCompactRequest) GetTargetLevel() int32 {
  if !p.IsSetTargetLevel() {
    return StartAppManualCompactRequest_TargetLevel_DEFAULT
  }
return *p.TargetLevel
}
var StartAppManualCompactRequest_Bottommost_DEFAULT bool
func (p *StartAppManualCompactRequest) GetBottommost() bool {
  if !p.IsSetBottommost() {
    return StartAppManualCompactRequest_Bottommost_DEFAULT
  }
return *p.Bottommost
}
var StartAppManualCompactRequest_MaxRunningCount_DEFAULT int32
func (p *StartAppManualCompactRequest) GetMaxRunningCount() int32 {
  if !p.IsSetMaxRunningCount() {
    return StartAppManualCompactRequest_MaxRunningCount_DEFAULT
  }
return *p.MaxRunningCount
}
func (p *StartAppManualCompactRequest) IsSetTriggerTime() bool {
  return p.TriggerTime != nil
}

func (p *StartAppManualCompactRequest) IsSetTargetLevel() bool {
  return p.TargetLevel != nil
}

func (p *StartAppManualCompactRequest) IsSetBottommost() bool {
  return p.Bottommost != nil
}

func (p *StartAppManualCompactRequest) IsSetMaxRunningCount() bool {
  return p.MaxRunningCount != nil
}

func (p *StartAppManualCompactRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StartAppManualCompactRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AppName = v
}
  return nil
}

func (p *StartAppManualCompactRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TriggerTime = &v
}
  return nil
}

func (p *StartAppManualCompactRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TargetLevel = &v
}
  return nil
}

func (p *StartAppManualCompactRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Bottommost = &v
}
  return nil
}

func (p *StartAppManualCompactRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.MaxRunningCount = &v
}
  return nil
}

func (p *StartAppManualCompactRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "start_app_manual_compact_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StartAppManualCompactRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "app_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:app_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.app_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:app_name: ", p), err) }
  return err
}

func (p *StartAppManualCompactRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTriggerTime() {
    if err := oprot.WriteFieldBegin(ctx, "trigger_time", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:trigger_time: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.TriggerTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.trigger_time (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:trigger_time: ", p), err) }
  }
  return err
}

func (p *StartAppManualCompactRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTargetLevel() {
    if err := oprot.WriteFieldBegin(ctx, "target_level", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:target_level: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.TargetLevel)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.target_level (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:target_level: ", p), err) }
  }
  return err
}

func (p *StartAppManualCompactRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetBottommost() {
    if err := oprot.WriteFieldBegin(ctx, "bottommost", thrift.BOOL, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:bottommost: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Bottommost)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.bottommost (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:bottommost: ", p), err) }
  }
  return err
}

func (p *StartAppManualCompactRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMaxRunningCount() {
    if err := oprot.WriteFieldBegin(ctx, "max_running_count", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:max_running_count: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.MaxRunningCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.max_running_count (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:max_running_count: ", p), err) }
  }
  return err
}

func (p *StartAppManualCompactRequest) Equals(other *StartAppManualCompactRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AppName != other.AppName { return false }
  if p.TriggerTime != other.TriggerTime {
    if p.TriggerTime == nil || other.TriggerTime == nil {
      return false
    }
    if (*p.TriggerTime) != (*other.TriggerTime) { return false }
  }
  if p.TargetLevel != other.TargetLevel {
    if p.TargetLevel == nil || other.TargetLevel == nil {
      return false
    }
    if (*p.TargetLevel) != (*other.TargetLevel) { return false }
  }
  if p.Bottommost != other.Bottommost {
    if p.Bottommost == nil || other.Bottommost == nil {
      return false
    }
    if (*p.Bottommost) != (*other.Bottommost) { return false }
  }
  if p.MaxRunningCount != other.MaxRunningCount {
    if p.MaxRunningCount == nil || other.MaxRunningCount == nil {
      return false
    }
    if (*p.MaxRunningCount) != (*other.MaxRunningCount) { return false }
  }
  return true
}

func (p *StartAppManualCompactRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StartAppManualCompactRequest(%+v)", *p)
}

// Attributes:
//  - Err
//  - HintMsg
type StartAppManualCompactResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
  HintMsg string `thrift:"hint_msg,2" db:"hint_msg" json:"hint_msg"`
}

func NewStartAppManualCompactResponse() *StartAppManualCompactResponse {
  return &StartAppManualCompactResponse{}
}

var StartAppManualCompactResponse_Err_DEFAULT *base.ErrorCode
func (p *StartAppManualCompactResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return StartAppManualCompactResponse_Err_DEFAULT
  }
return p.Err
}

func (p *StartAppManualCompactResponse) GetHintMsg() string {
  return p.HintMsg
}
func (p *StartAppManualCompactResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *StartAppManualCompactResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StartAppManualCompactResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *StartAppManualCompactResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.HintMsg = v
}
  return nil
}

func (p *StartAppManualCompactResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "start_app_manual_compact_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StartAppManualCompactResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *StartAppManualCompactResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hint_msg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hint_msg: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.HintMsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hint_msg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hint_msg: ", p), err) }
  return err
}

func (p *StartAppManualCompactResponse) Equals(other *StartAppManualCompactResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  if p.HintMsg != other.HintMsg { return false }
  return true
}

func (p *StartAppManualCompactResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StartAppManualCompactResponse(%+v)", *p)
}

// Attributes:
//  - AppName
type QueryAppManualCompactRequest struct {
  AppName string `thrift:"app_name,1" db:"app_name" json:"app_name"`
}

func NewQueryAppManualCompactRequest() *QueryAppManualCompactRequest {
  return &QueryAppManualCompactRequest{}
}


func (p *QueryAppManualCompactRequest) GetAppName() string {
  return p.AppName
}
func (p *QueryAppManualCompactRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *QueryAppManualCompactRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AppName = v
}
  return nil
}

func (p *QueryAppManualCompactRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "query_app_manual_compact_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *QueryAppManualCompactRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "app_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:app_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.app_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:app_name: ", p), err) }
  return err
}

func (p *QueryAppManualCompactRequest) Equals(other *QueryAppManualCompactRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AppName != other.AppName { return false }
  return true
}

func (p *QueryAppManualCompactRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("QueryAppManualCompactRequest(%+v)", *p)
}

// Attributes:
//  - Err
//  - HintMsg
//  - Progress
type QueryAppManualCompactResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
  HintMsg string `thrift:"hint_msg,2" db:"hint_msg" json:"hint_msg"`
  Progress *int32 `thrift:"progress,3" db:"progress" json:"progress,omitempty"`
}

func NewQueryAppManualCompactResponse() *QueryAppManualCompactResponse {
  return &QueryAppManualCompactResponse{}
}

var QueryAppManualCompactResponse_Err_DEFAULT *base.ErrorCode
func (p *QueryAppManualCompactResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return QueryAppManualCompactResponse_Err_DEFAULT
  }
return p.Err
}

func (p *QueryAppManualCompactResponse) GetHintMsg() string {
  return p.HintMsg
}
var QueryAppManualCompactResponse_Progress_DEFAULT int32
func (p *QueryAppManualCompactResponse) GetProgress() int32 {
  if !p.IsSetProgress() {
    return QueryAppManualCompactResponse_Progress_DEFAULT
  }
return *p.Progress
}
func (p *QueryAppManualCompactResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *QueryAppManualCompactResponse) IsSetProgress() bool {
  return p.Progress != nil
}

func (p *QueryAppManualCompactResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *QueryAppManualCompactResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *QueryAppManualCompactResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.HintMsg = v
}
  return nil
}

func (p *QueryAppManualCompactResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Progress = &v
}
  return nil
}

func (p *QueryAppManualCompactResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "query_app_manual_compact_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *QueryAppManualCompactResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *QueryAppManualCompactResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hint_msg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hint_msg: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.HintMsg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hint_msg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hint_msg: ", p), err) }
  return err
}

func (p *QueryAppManualCompactResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetProgress() {
    if err := oprot.WriteFieldBegin(ctx, "progress", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:progress: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Progress)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.progress (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:progress: ", p), err) }
  }
  return err
}

func (p *QueryAppManualCompactResponse) Equals(other *QueryAppManualCompactResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  if p.HintMsg != other.HintMsg { return false }
  if p.Progress != other.Progress {
    if p.Progress == nil || other.Progress == nil {
      return false
    }
    if (*p.Progress) != (*other.Progress) { return false }
  }
  return true
}

func (p *QueryAppManualCompactResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("QueryAppManualCompactResponse(%+v)", *p)
}

// Attributes:
//  - Status
//  - Address
type NodeInfo struct {
  Status NodeStatus `thrift:"status,1" db:"status" json:"status"`
  Address *base.RPCAddress `thrift:"address,2" db:"address" json:"address"`
}

func NewNodeInfo() *NodeInfo {
  return &NodeInfo{
Status: 0,
}
}


func (p *NodeInfo) GetStatus() NodeStatus {
  return p.Status
}
var NodeInfo_Address_DEFAULT *base.RPCAddress
func (p *NodeInfo) GetAddress() *base.RPCAddress {
  if !p.IsSetAddress() {
    return NodeInfo_Address_DEFAULT
  }
return p.Address
}
func (p *NodeInfo) IsSetAddress() bool {
  return p.Address != nil
}

func (p *NodeInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NodeInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := NodeStatus(v)
  p.Status = temp
}
  return nil
}

func (p *NodeInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Address = &base.RPCAddress{}
  if err := p.Address.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Address), err)
  }
  return nil
}

func (p *NodeInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "node_info"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NodeInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *NodeInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "address", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:address: ", p), err) }
  if err := p.Address.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Address), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:address: ", p), err) }
  return err
}

func (p *NodeInfo) Equals(other *NodeInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  if !p.Address.Equals(other.Address) { return false }
  return true
}

func (p *NodeInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NodeInfo(%+v)", *p)
}

// Attributes:
//  - Status
type ConfigurationListNodesRequest struct {
  Status NodeStatus `thrift:"status,1" db:"status" json:"status"`
}

func NewConfigurationListNodesRequest() *ConfigurationListNodesRequest {
  return &ConfigurationListNodesRequest{
Status: 0,
}
}


func (p *ConfigurationListNodesRequest) GetStatus() NodeStatus {
  return p.Status
}
func (p *ConfigurationListNodesRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationListNodesRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := NodeStatus(v)
  p.Status = temp
}
  return nil
}

func (p *ConfigurationListNodesRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_list_nodes_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationListNodesRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *ConfigurationListNodesRequest) Equals(other *ConfigurationListNodesRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status { return false }
  return true
}

func (p *ConfigurationListNodesRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationListNodesRequest(%+v)", *p)
}

// Attributes:
//  - Err
//  - Infos
type ConfigurationListNodesResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
  Infos []*NodeInfo `thrift:"infos,2" db:"infos" json:"infos"`
}

func NewConfigurationListNodesResponse() *ConfigurationListNodesResponse {
  return &ConfigurationListNodesResponse{}
}

var ConfigurationListNodesResponse_Err_DEFAULT *base.ErrorCode
func (p *ConfigurationListNodesResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return ConfigurationListNodesResponse_Err_DEFAULT
  }
return p.Err
}

func (p *ConfigurationListNodesResponse) GetInfos() []*NodeInfo {
  return p.Infos
}
func (p *ConfigurationListNodesResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *ConfigurationListNodesResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationListNodesResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *ConfigurationListNodesResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*NodeInfo, 0, size)
  p.Infos =  tSlice
  for i := 0; i < size; i ++ {
    _elem22 := &NodeInfo{
    Status:     0,
}
    if err := _elem22.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem22), err)
    }
    p.Infos = append(p.Infos, _elem22)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ConfigurationListNodesResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_list_nodes_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationListNodesResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *ConfigurationListNodesResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "infos", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:infos: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Infos)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Infos {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:infos: ", p), err) }
  return err
}

func (p *ConfigurationListNodesResponse) Equals(other *ConfigurationListNodesResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  if len(p.Infos) != len(other.Infos) { return false }
  for i, _tgt := range p.Infos {
    _src23 := other.Infos[i]
    if !_tgt.Equals(_src23) { return false }
  }
  return true
}

func (p *ConfigurationListNodesResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationListNodesResponse(%+v)", *p)
}

type ConfigurationClusterInfoRequest struct {
}

func NewConfigurationClusterInfoRequest() *ConfigurationClusterInfoRequest {
  return &ConfigurationClusterInfoRequest{}
}

func (p *ConfigurationClusterInfoRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationClusterInfoRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_cluster_info_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationClusterInfoRequest) Equals(other *ConfigurationClusterInfoRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *ConfigurationClusterInfoRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationClusterInfoRequest(%+v)", *p)
}

// Attributes:
//  - Err
//  - Keys
//  - Values
type ConfigurationClusterInfoResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
  Keys []string `thrift:"keys,2" db:"keys" json:"keys"`
  Values []string `thrift:"values,3" db:"values" json:"values"`
}

func NewConfigurationClusterInfoResponse() *ConfigurationClusterInfoResponse {
  return &ConfigurationClusterInfoResponse{}
}

var ConfigurationClusterInfoResponse_Err_DEFAULT *base.ErrorCode
func (p *ConfigurationClusterInfoResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return ConfigurationClusterInfoResponse_Err_DEFAULT
  }
return p.Err
}

func (p *ConfigurationClusterInfoResponse) GetKeys() []string {
  return p.Keys
}

func (p *ConfigurationClusterInfoResponse) GetValues() []string {
  return p.Values
}
func (p *ConfigurationClusterInfoResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *ConfigurationClusterInfoResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationClusterInfoResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *ConfigurationClusterInfoResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Keys =  tSlice
  for i := 0; i < size; i ++ {
var _elem24 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem24 = v
}
    p.Keys = append(p.Keys, _elem24)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ConfigurationClusterInfoResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Values =  tSlice
  for i := 0; i < size; i ++ {
var _elem25 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem25 = v
}
    p.Values = append(p.Values, _elem25)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ConfigurationClusterInfoResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_cluster_info_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationClusterInfoResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *ConfigurationClusterInfoResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keys", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:keys: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Keys)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Keys {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:keys: ", p), err) }
  return err
}

func (p *ConfigurationClusterInfoResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "values", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:values: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Values)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Values {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:values: ", p), err) }
  return err
}

func (p *ConfigurationClusterInfoResponse) Equals(other *ConfigurationClusterInfoResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  if len(p.Keys) != len(other.Keys) { return false }
  for i, _tgt := range p.Keys {
    _src26 := other.Keys[i]
    if _tgt != _src26 { return false }
  }
  if len(p.Values) != len(other.Values) { return false }
  for i, _tgt := range p.Values {
    _src27 := other.Values[i]
    if _tgt != _src27 { return false }
  }
  return true
}

func (p *ConfigurationClusterInfoResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationClusterInfoResponse(%+v)", *p)
}

// Attributes:
//  - Level
type ConfigurationMetaControlRequest struct {
  Level MetaFunctionLevel `thrift:"level,1" db:"level" json:"level"`
}

func NewConfigurationMetaControlRequest() *ConfigurationMetaControlRequest {
  return &ConfigurationMetaControlRequest{}
}


func (p *ConfigurationMetaControlRequest) GetLevel() MetaFunctionLevel {
  return p.Level
}
func (p *ConfigurationMetaControlRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationMetaControlRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := MetaFunctionLevel(v)
  p.Level = temp
}
  return nil
}

func (p *ConfigurationMetaControlRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_meta_control_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationMetaControlRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "level", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:level: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Level)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.level (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:level: ", p), err) }
  return err
}

func (p *ConfigurationMetaControlRequest) Equals(other *ConfigurationMetaControlRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Level != other.Level { return false }
  return true
}

func (p *ConfigurationMetaControlRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationMetaControlRequest(%+v)", *p)
}

// Attributes:
//  - Err
//  - OldLevel
type ConfigurationMetaControlResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
  OldLevel MetaFunctionLevel `thrift:"old_level,2" db:"old_level" json:"old_level"`
}

func NewConfigurationMetaControlResponse() *ConfigurationMetaControlResponse {
  return &ConfigurationMetaControlResponse{}
}

var ConfigurationMetaControlResponse_Err_DEFAULT *base.ErrorCode
func (p *ConfigurationMetaControlResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return ConfigurationMetaControlResponse_Err_DEFAULT
  }
return p.Err
}

func (p *ConfigurationMetaControlResponse) GetOldLevel() MetaFunctionLevel {
  return p.OldLevel
}
func (p *ConfigurationMetaControlResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *ConfigurationMetaControlResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationMetaControlResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *ConfigurationMetaControlResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := MetaFunctionLevel(v)
  p.OldLevel = temp
}
  return nil
}

func (p *ConfigurationMetaControlResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_meta_control_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationMetaControlResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *ConfigurationMetaControlResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "old_level", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:old_level: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.OldLevel)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.old_level (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:old_level: ", p), err) }
  return err
}

func (p *ConfigurationMetaControlResponse) Equals(other *ConfigurationMetaControlResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  if p.OldLevel != other.OldLevel { return false }
  return true
}

func (p *ConfigurationMetaControlResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationMetaControlResponse(%+v)", *p)
}

// Attributes:
//  - Target
//  - Node
//  - Type
type ConfigurationProposalAction struct {
  Target *base.RPCAddress `thrift:"target,1" db:"target" json:"target"`
  Node *base.RPCAddress `thrift:"node,2" db:"node" json:"node"`
  Type ConfigType `thrift:"type,3" db:"type" json:"type"`
}

func NewConfigurationProposalAction() *ConfigurationProposalAction {
  return &ConfigurationProposalAction{}
}

var ConfigurationProposalAction_Target_DEFAULT *base.RPCAddress
func (p *ConfigurationProposalAction) GetTarget() *base.RPCAddress {
  if !p.IsSetTarget() {
    return ConfigurationProposalAction_Target_DEFAULT
  }
return p.Target
}
var ConfigurationProposalAction_Node_DEFAULT *base.RPCAddress
func (p *ConfigurationProposalAction) GetNode() *base.RPCAddress {
  if !p.IsSetNode() {
    return ConfigurationProposalAction_Node_DEFAULT
  }
return p.Node
}

func (p *ConfigurationProposalAction) GetType() ConfigType {
  return p.Type
}
func (p *ConfigurationProposalAction) IsSetTarget() bool {
  return p.Target != nil
}

func (p *ConfigurationProposalAction) IsSetNode() bool {
  return p.Node != nil
}

func (p *ConfigurationProposalAction) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationProposalAction)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Target = &base.RPCAddress{}
  if err := p.Target.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Target), err)
  }
  return nil
}

func (p *ConfigurationProposalAction)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Node = &base.RPCAddress{}
  if err := p.Node.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Node), err)
  }
  return nil
}

func (p *ConfigurationProposalAction)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := ConfigType(v)
  p.Type = temp
}
  return nil
}

func (p *ConfigurationProposalAction) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_proposal_action"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationProposalAction) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "target", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:target: ", p), err) }
  if err := p.Target.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Target), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:target: ", p), err) }
  return err
}

func (p *ConfigurationProposalAction) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "node", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:node: ", p), err) }
  if err := p.Node.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Node), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:node: ", p), err) }
  return err
}

func (p *ConfigurationProposalAction) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  return err
}

func (p *ConfigurationProposalAction) Equals(other *ConfigurationProposalAction) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Target.Equals(other.Target) { return false }
  if !p.Node.Equals(other.Node) { return false }
  if p.Type != other.Type { return false }
  return true
}

func (p *ConfigurationProposalAction) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationProposalAction(%+v)", *p)
}

// Attributes:
//  - Gpid
//  - ActionList
//  - Force
//  - BalanceType
type ConfigurationBalancerRequest struct {
  Gpid *base.Gpid `thrift:"gpid,1" db:"gpid" json:"gpid"`
  ActionList []*ConfigurationProposalAction `thrift:"action_list,2" db:"action_list" json:"action_list"`
  Force bool `thrift:"force,3" db:"force" json:"force"`
  BalanceType *BalancerRequestType `thrift:"balance_type,4" db:"balance_type" json:"balance_type,omitempty"`
}

func NewConfigurationBalancerRequest() *ConfigurationBalancerRequest {
  return &ConfigurationBalancerRequest{}
}

var ConfigurationBalancerRequest_Gpid_DEFAULT *base.Gpid
func (p *ConfigurationBalancerRequest) GetGpid() *base.Gpid {
  if !p.IsSetGpid() {
    return ConfigurationBalancerRequest_Gpid_DEFAULT
  }
return p.Gpid
}

func (p *ConfigurationBalancerRequest) GetActionList() []*ConfigurationProposalAction {
  return p.ActionList
}
var ConfigurationBalancerRequest_Force_DEFAULT bool = false

func (p *ConfigurationBalancerRequest) GetForce() bool {
  return p.Force
}
var ConfigurationBalancerRequest_BalanceType_DEFAULT BalancerRequestType
func (p *ConfigurationBalancerRequest) GetBalanceType() BalancerRequestType {
  if !p.IsSetBalanceType() {
    return ConfigurationBalancerRequest_BalanceType_DEFAULT
  }
return *p.BalanceType
}
func (p *ConfigurationBalancerRequest) IsSetGpid() bool {
  return p.Gpid != nil
}

func (p *ConfigurationBalancerRequest) IsSetForce() bool {
  return p.Force != ConfigurationBalancerRequest_Force_DEFAULT
}

func (p *ConfigurationBalancerRequest) IsSetBalanceType() bool {
  return p.BalanceType != nil
}

func (p *ConfigurationBalancerRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationBalancerRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Gpid = &base.Gpid{}
  if err := p.Gpid.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Gpid), err)
  }
  return nil
}

func (p *ConfigurationBalancerRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ConfigurationProposalAction, 0, size)
  p.ActionList =  tSlice
  for i := 0; i < size; i ++ {
    _elem28 := &ConfigurationProposalAction{}
    if err := _elem28.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem28), err)
    }
    p.ActionList = append(p.ActionList, _elem28)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ConfigurationBalancerRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Force = v
}
  return nil
}

func (p *ConfigurationBalancerRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := BalancerRequestType(v)
  p.BalanceType = &temp
}
  return nil
}

func (p *ConfigurationBalancerRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_balancer_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationBalancerRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "gpid", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:gpid: ", p), err) }
  if err := p.Gpid.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Gpid), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:gpid: ", p), err) }
  return err
}

func (p *ConfigurationBalancerRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "action_list", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:action_list: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ActionList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ActionList {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:action_list: ", p), err) }
  return err
}

func (p *ConfigurationBalancerRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetForce() {
    if err := oprot.WriteFieldBegin(ctx, "force", thrift.BOOL, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:force: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(p.Force)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.force (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:force: ", p), err) }
  }
  return err
}

func (p *ConfigurationBalancerRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetBalanceType() {
    if err := oprot.WriteFieldBegin(ctx, "balance_type", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:balance_type: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.BalanceType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.balance_type (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:balance_type: ", p), err) }
  }
  return err
}

func (p *ConfigurationBalancerRequest) Equals(other *ConfigurationBalancerRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Gpid.Equals(other.Gpid) { return false }
  if len(p.ActionList) != len(other.ActionList) { return false }
  for i, _tgt := range p.ActionList {
    _src29 := other.ActionList[i]
    if !_tgt.Equals(_src29) { return false }
  }
  if p.Force != other.Force { return false }
  if p.BalanceType != other.BalanceType {
    if p.BalanceType == nil || other.BalanceType == nil {
      return false
    }
    if (*p.BalanceType) != (*other.BalanceType) { return false }
  }
  return true
}

func (p *ConfigurationBalancerRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationBalancerRequest(%+v)", *p)
}

// Attributes:
//  - Err
type ConfigurationBalancerResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
}

func NewConfigurationBalancerResponse() *ConfigurationBalancerResponse {
  return &ConfigurationBalancerResponse{}
}

var ConfigurationBalancerResponse_Err_DEFAULT *base.ErrorCode
func (p *ConfigurationBalancerResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return ConfigurationBalancerResponse_Err_DEFAULT
  }
return p.Err
}
func (p *ConfigurationBalancerResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *ConfigurationBalancerResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationBalancerResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *ConfigurationBalancerResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_balancer_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationBalancerResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *ConfigurationBalancerResponse) Equals(other *ConfigurationBalancerResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  return true
}

func (p *ConfigurationBalancerResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationBalancerResponse(%+v)", *p)
}

// Attributes:
//  - Pid
type DddDiagnoseRequest struct {
  Pid *base.Gpid `thrift:"pid,1" db:"pid" json:"pid"`
}

func NewDddDiagnoseRequest() *DddDiagnoseRequest {
  return &DddDiagnoseRequest{}
}

var DddDiagnoseRequest_Pid_DEFAULT *base.Gpid
func (p *DddDiagnoseRequest) GetPid() *base.Gpid {
  if !p.IsSetPid() {
    return DddDiagnoseRequest_Pid_DEFAULT
  }
return p.Pid
}
func (p *DddDiagnoseRequest) IsSetPid() bool {
  return p.Pid != nil
}

func (p *DddDiagnoseRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DddDiagnoseRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Pid = &base.Gpid{}
  if err := p.Pid.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Pid), err)
  }
  return nil
}

func (p *DddDiagnoseRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ddd_diagnose_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DddDiagnoseRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pid", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pid: ", p), err) }
  if err := p.Pid.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Pid), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pid: ", p), err) }
  return err
}

func (p *DddDiagnoseRequest) Equals(other *DddDiagnoseRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Pid.Equals(other.Pid) { return false }
  return true
}

func (p *DddDiagnoseRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DddDiagnoseRequest(%+v)", *p)
}

// Attributes:
//  - Node
//  - DropTimeMs
//  - IsAlive
//  - IsCollected
//  - Ballot
//  - LastCommittedDecree
//  - LastPreparedDecree
type DddNodeInfo struct {
  Node *base.RPCAddress `thrift:"node,1" db:"node" json:"node"`
  DropTimeMs int64 `thrift:"drop_time_ms,2" db:"drop_time_ms" json:"drop_time_ms"`
  IsAlive bool `thrift:"is_alive,3" db:"is_alive" json:"is_alive"`
  IsCollected bool `thrift:"is_collected,4" db:"is_collected" json:"is_collected"`
  Ballot int64 `thrift:"ballot,5" db:"ballot" json:"ballot"`
  LastCommittedDecree int64 `thrift:"last_committed_decree,6" db:"last_committed_decree" json:"last_committed_decree"`
  LastPreparedDecree int64 `thrift:"last_prepared_decree,7" db:"last_prepared_decree" json:"last_prepared_decree"`
}

func NewDddNodeInfo() *DddNodeInfo {
  return &DddNodeInfo{}
}

var DddNodeInfo_Node_DEFAULT *base.RPCAddress
func (p *DddNodeInfo) GetNode() *base.RPCAddress {
  if !p.IsSetNode() {
    return DddNodeInfo_Node_DEFAULT
  }
return p.Node
}

func (p *DddNodeInfo) GetDropTimeMs() int64 {
  return p.DropTimeMs
}

func (p *DddNodeInfo) GetIsAlive() bool {
  return p.IsAlive
}

func (p *DddNodeInfo) GetIsCollected() bool {
  return p.IsCollected
}

func (p *DddNodeInfo) GetBallot() int64 {
  return p.Ballot
}

func (p *DddNodeInfo) GetLastCommittedDecree() int64 {
  return p.LastCommittedDecree
}

func (p *DddNodeInfo) GetLastPreparedDecree() int64 {
  return p.LastPreparedDecree
}
func (p *DddNodeInfo) IsSetNode() bool {
  return p.Node != nil
}

func (p *DddNodeInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DddNodeInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Node = &base.RPCAddress{}
  if err := p.Node.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Node), err)
  }
  return nil
}

func (p *DddNodeInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DropTimeMs = v
}
  return nil
}

func (p *DddNodeInfo)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IsAlive = v
}
  return nil
}

func (p *DddNodeInfo)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IsCollected = v
}
  return nil
}

func (p *DddNodeInfo)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Ballot = v
}
  return nil
}

func (p *DddNodeInfo)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.LastCommittedDecree = v
}
  return nil
}

func (p *DddNodeInfo)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.LastPreparedDecree = v
}
  return nil
}

func (p *DddNodeInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ddd_node_info"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DddNodeInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "node", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:node: ", p), err) }
  if err := p.Node.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Node), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:node: ", p), err) }
  return err
}

func (p *DddNodeInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "drop_time_ms", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:drop_time_ms: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.DropTimeMs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.drop_time_ms (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:drop_time_ms: ", p), err) }
  return err
}

func (p *DddNodeInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "is_alive", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:is_alive: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IsAlive)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_alive (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:is_alive: ", p), err) }
  return err
}

func (p *DddNodeInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "is_collected", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:is_collected: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IsCollected)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_collected (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:is_collected: ", p), err) }
  return err
}

func (p *DddNodeInfo) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ballot", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ballot: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Ballot)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ballot (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ballot: ", p), err) }
  return err
}

func (p *DddNodeInfo) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "last_committed_decree", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:last_committed_decree: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LastCommittedDecree)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.last_committed_decree (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:last_committed_decree: ", p), err) }
  return err
}

func (p *DddNodeInfo) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "last_prepared_decree", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:last_prepared_decree: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LastPreparedDecree)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.last_prepared_decree (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:last_prepared_decree: ", p), err) }
  return err
}

func (p *DddNodeInfo) Equals(other *DddNodeInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Node.Equals(other.Node) { return false }
  if p.DropTimeMs != other.DropTimeMs { return false }
  if p.IsAlive != other.IsAlive { return false }
  if p.IsCollected != other.IsCollected { return false }
  if p.Ballot != other.Ballot { return false }
  if p.LastCommittedDecree != other.LastCommittedDecree { return false }
  if p.LastPreparedDecree != other.LastPreparedDecree { return false }
  return true
}

func (p *DddNodeInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DddNodeInfo(%+v)", *p)
}

// Attributes:
//  - Config
//  - Dropped
//  - Reason
type DddPartitionInfo struct {
  Config *replication.PartitionConfiguration `thrift:"config,1" db:"config" json:"config"`
  Dropped []*DddNodeInfo `thrift:"dropped,2" db:"dropped" json:"dropped"`
  Reason string `thrift:"reason,3" db:"reason" json:"reason"`
}

func NewDddPartitionInfo() *DddPartitionInfo {
  return &DddPartitionInfo{}
}

var DddPartitionInfo_Config_DEFAULT *replication.PartitionConfiguration
func (p *DddPartitionInfo) GetConfig() *replication.PartitionConfiguration {
  if !p.IsSetConfig() {
    return DddPartitionInfo_Config_DEFAULT
  }
return p.Config
}

func (p *DddPartitionInfo) GetDropped() []*DddNodeInfo {
  return p.Dropped
}

func (p *DddPartitionInfo) GetReason() string {
  return p.Reason
}
func (p *DddPartitionInfo) IsSetConfig() bool {
  return p.Config != nil
}

func (p *DddPartitionInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DddPartitionInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Config = &replication.PartitionConfiguration{}
  if err := p.Config.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Config), err)
  }
  return nil
}

func (p *DddPartitionInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*DddNodeInfo, 0, size)
  p.Dropped =  tSlice
  for i := 0; i < size; i ++ {
    _elem30 := &DddNodeInfo{}
    if err := _elem30.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem30), err)
    }
    p.Dropped = append(p.Dropped, _elem30)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *DddPartitionInfo)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Reason = v
}
  return nil
}

func (p *DddPartitionInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ddd_partition_info"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DddPartitionInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "config", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:config: ", p), err) }
  if err := p.Config.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Config), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:config: ", p), err) }
  return err
}

func (p *DddPartitionInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dropped", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dropped: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Dropped)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Dropped {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dropped: ", p), err) }
  return err
}

func (p *DddPartitionInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reason", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reason: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Reason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reason (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reason: ", p), err) }
  return err
}

func (p *DddPartitionInfo) Equals(other *DddPartitionInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Config.Equals(other.Config) { return false }
  if len(p.Dropped) != len(other.Dropped) { return false }
  for i, _tgt := range p.Dropped {
    _src31 := other.Dropped[i]
    if !_tgt.Equals(_src31) { return false }
  }
  if p.Reason != other.Reason { return false }
  return true
}

func (p *DddPartitionInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DddPartitionInfo(%+v)", *p)
}

// Attributes:
//  - Err
//  - Partitions
type DddDiagnoseResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
  Partitions []*DddPartitionInfo `thrift:"partitions,2" db:"partitions" json:"partitions"`
}

func NewDddDiagnoseResponse() *DddDiagnoseResponse {
  return &DddDiagnoseResponse{}
}

var DddDiagnoseResponse_Err_DEFAULT *base.ErrorCode
func (p *DddDiagnoseResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return DddDiagnoseResponse_Err_DEFAULT
  }
return p.Err
}

func (p *DddDiagnoseResponse) GetPartitions() []*DddPartitionInfo {
  return p.Partitions
}
func (p *DddDiagnoseResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *DddDiagnoseResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DddDiagnoseResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *DddDiagnoseResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*DddPartitionInfo, 0, size)
  p.Partitions =  tSlice
  for i := 0; i < size; i ++ {
    _elem32 := &DddPartitionInfo{}
    if err := _elem32.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem32), err)
    }
    p.Partitions = append(p.Partitions, _elem32)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *DddDiagnoseResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ddd_diagnose_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DddDiagnoseResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *DddDiagnoseResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "partitions", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:partitions: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Partitions)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Partitions {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:partitions: ", p), err) }
  return err
}

func (p *DddDiagnoseResponse) Equals(other *DddDiagnoseResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  if len(p.Partitions) != len(other.Partitions) { return false }
  for i, _tgt := range p.Partitions {
    _src33 := other.Partitions[i]
    if !_tgt.Equals(_src33) { return false }
  }
  return true
}

func (p *DddDiagnoseResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DddDiagnoseResponse(%+v)", *p)
}

// Attributes:
//  - AppName
type ConfigurationGetMaxReplicaCountRequest struct {
  AppName string `thrift:"app_name,1" db:"app_name" json:"app_name"`
}

func NewConfigurationGetMaxReplicaCountRequest() *ConfigurationGetMaxReplicaCountRequest {
  return &ConfigurationGetMaxReplicaCountRequest{}
}


func (p *ConfigurationGetMaxReplicaCountRequest) GetAppName() string {
  return p.AppName
}
func (p *ConfigurationGetMaxReplicaCountRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationGetMaxReplicaCountRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AppName = v
}
  return nil
}

func (p *ConfigurationGetMaxReplicaCountRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_get_max_replica_count_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationGetMaxReplicaCountRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "app_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:app_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.app_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:app_name: ", p), err) }
  return err
}

func (p *ConfigurationGetMaxReplicaCountRequest) Equals(other *ConfigurationGetMaxReplicaCountRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AppName != other.AppName { return false }
  return true
}

func (p *ConfigurationGetMaxReplicaCountRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationGetMaxReplicaCountRequest(%+v)", *p)
}

// Attributes:
//  - Err
//  - MaxReplicaCount
//  - HintMessage
type ConfigurationGetMaxReplicaCountResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
  MaxReplicaCount int32 `thrift:"max_replica_count,2" db:"max_replica_count" json:"max_replica_count"`
  HintMessage string `thrift:"hint_message,3" db:"hint_message" json:"hint_message"`
}

func NewConfigurationGetMaxReplicaCountResponse() *ConfigurationGetMaxReplicaCountResponse {
  return &ConfigurationGetMaxReplicaCountResponse{}
}

var ConfigurationGetMaxReplicaCountResponse_Err_DEFAULT *base.ErrorCode
func (p *ConfigurationGetMaxReplicaCountResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return ConfigurationGetMaxReplicaCountResponse_Err_DEFAULT
  }
return p.Err
}

func (p *ConfigurationGetMaxReplicaCountResponse) GetMaxReplicaCount() int32 {
  return p.MaxReplicaCount
}

func (p *ConfigurationGetMaxReplicaCountResponse) GetHintMessage() string {
  return p.HintMessage
}
func (p *ConfigurationGetMaxReplicaCountResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *ConfigurationGetMaxReplicaCountResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationGetMaxReplicaCountResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *ConfigurationGetMaxReplicaCountResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MaxReplicaCount = v
}
  return nil
}

func (p *ConfigurationGetMaxReplicaCountResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.HintMessage = v
}
  return nil
}

func (p *ConfigurationGetMaxReplicaCountResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_get_max_replica_count_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationGetMaxReplicaCountResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *ConfigurationGetMaxReplicaCountResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "max_replica_count", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:max_replica_count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MaxReplicaCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_replica_count (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:max_replica_count: ", p), err) }
  return err
}

func (p *ConfigurationGetMaxReplicaCountResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hint_message", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hint_message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.HintMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hint_message (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hint_message: ", p), err) }
  return err
}

func (p *ConfigurationGetMaxReplicaCountResponse) Equals(other *ConfigurationGetMaxReplicaCountResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  if p.MaxReplicaCount != other.MaxReplicaCount { return false }
  if p.HintMessage != other.HintMessage { return false }
  return true
}

func (p *ConfigurationGetMaxReplicaCountResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationGetMaxReplicaCountResponse(%+v)", *p)
}

// Attributes:
//  - AppName
//  - MaxReplicaCount
type ConfigurationSetMaxReplicaCountRequest struct {
  AppName string `thrift:"app_name,1" db:"app_name" json:"app_name"`
  MaxReplicaCount int32 `thrift:"max_replica_count,2" db:"max_replica_count" json:"max_replica_count"`
}

func NewConfigurationSetMaxReplicaCountRequest() *ConfigurationSetMaxReplicaCountRequest {
  return &ConfigurationSetMaxReplicaCountRequest{}
}


func (p *ConfigurationSetMaxReplicaCountRequest) GetAppName() string {
  return p.AppName
}

func (p *ConfigurationSetMaxReplicaCountRequest) GetMaxReplicaCount() int32 {
  return p.MaxReplicaCount
}
func (p *ConfigurationSetMaxReplicaCountRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationSetMaxReplicaCountRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AppName = v
}
  return nil
}

func (p *ConfigurationSetMaxReplicaCountRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MaxReplicaCount = v
}
  return nil
}

func (p *ConfigurationSetMaxReplicaCountRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_set_max_replica_count_request"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationSetMaxReplicaCountRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "app_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:app_name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.app_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:app_name: ", p), err) }
  return err
}

func (p *ConfigurationSetMaxReplicaCountRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "max_replica_count", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:max_replica_count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MaxReplicaCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max_replica_count (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:max_replica_count: ", p), err) }
  return err
}

func (p *ConfigurationSetMaxReplicaCountRequest) Equals(other *ConfigurationSetMaxReplicaCountRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AppName != other.AppName { return false }
  if p.MaxReplicaCount != other.MaxReplicaCount { return false }
  return true
}

func (p *ConfigurationSetMaxReplicaCountRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationSetMaxReplicaCountRequest(%+v)", *p)
}

// Attributes:
//  - Err
//  - OldMaxReplicaCount
//  - HintMessage
type ConfigurationSetMaxReplicaCountResponse struct {
  Err *base.ErrorCode `thrift:"err,1" db:"err" json:"err"`
  OldMaxReplicaCount int32 `thrift:"old_max_replica_count,2" db:"old_max_replica_count" json:"old_max_replica_count"`
  HintMessage string `thrift:"hint_message,3" db:"hint_message" json:"hint_message"`
}

func NewConfigurationSetMaxReplicaCountResponse() *ConfigurationSetMaxReplicaCountResponse {
  return &ConfigurationSetMaxReplicaCountResponse{}
}

var ConfigurationSetMaxReplicaCountResponse_Err_DEFAULT *base.ErrorCode
func (p *ConfigurationSetMaxReplicaCountResponse) GetErr() *base.ErrorCode {
  if !p.IsSetErr() {
    return ConfigurationSetMaxReplicaCountResponse_Err_DEFAULT
  }
return p.Err
}

func (p *ConfigurationSetMaxReplicaCountResponse) GetOldMaxReplicaCount() int32 {
  return p.OldMaxReplicaCount
}

func (p *ConfigurationSetMaxReplicaCountResponse) GetHintMessage() string {
  return p.HintMessage
}
func (p *ConfigurationSetMaxReplicaCountResponse) IsSetErr() bool {
  return p.Err != nil
}

func (p *ConfigurationSetMaxReplicaCountResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigurationSetMaxReplicaCountResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &base.ErrorCode{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *ConfigurationSetMaxReplicaCountResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.OldMaxReplicaCount = v
}
  return nil
}

func (p *ConfigurationSetMaxReplicaCountResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.HintMessage = v
}
  return nil
}

func (p *ConfigurationSetMaxReplicaCountResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "configuration_set_max_replica_count_response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigurationSetMaxReplicaCountResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:err: ", p), err) }
  if err := p.Err.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:err: ", p), err) }
  return err
}

func (p *ConfigurationSetMaxReplicaCountResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "old_max_replica_count", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:old_max_replica_count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.OldMaxReplicaCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.old_max_replica_count (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:old_max_replica_count: ", p), err) }
  return err
}

func (p *ConfigurationSetMaxReplicaCountResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hint_message", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hint_message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.HintMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hint_message (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hint_message: ", p), err) }
  return err
}

func (p *ConfigurationSetMaxReplicaCountResponse) Equals(other *ConfigurationSetMaxReplicaCountResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Err.Equals(other.Err) { return false }
  if p.OldMaxReplicaCount != other.OldMaxReplicaCount { return false }
  if p.HintMessage != other.HintMessage { return false }
  return true
}

func (p *ConfigurationSetMaxReplicaCountResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigurationSetMaxReplicaCountResponse(%+v)", *p)
}

